{
  "version": 3,
  "sources": ["../../lenis/src/maths.js", "../../src/animate.ts", "../../src/dimensions.ts", "../../lenis/src/debounce.js", "../../src/emitter.ts", "../../src/virtual-scroll.ts", "../../src/index.ts", "../../locomotive-scroll/core/IO.ts", "../../locomotive-scroll/utils/maths.ts", "../../locomotive-scroll/core/ScrollElement.ts", "../../locomotive-scroll/core/Core.ts", "../../locomotive-scroll/core/RO.ts", "../../locomotive-scroll/index.ts"],
  "sourcesContent": ["// Clamp a value between a minimum and maximum value\r\nexport function clamp(min, input, max) {\r\n  return Math.max(min, Math.min(input, max))\r\n}\r\n\r\n// Truncate a floating-point number to a specified number of decimal places\r\nexport function truncate(value, decimals = 0) {\r\n  return parseFloat(value.toFixed(decimals))\r\n}\r\n\r\n// Linearly interpolate between two values using an amount (0 <= t <= 1)\r\nexport function lerp(x, y, t) {\r\n  return (1 - t) * x + t * y\r\n}\r\n\r\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\r\nexport function damp(x, y, lambda, dt) {\r\n  return lerp(x, y, 1 - Math.exp(-lambda * dt))\r\n}\r\n\r\n// Calculate the modulo of the dividend and divisor while keeping the result within the same sign as the divisor\r\n// https://anguscroll.com/just/just-modulo\r\nexport function modulo(n, d) {\r\n  return ((n % d) + d) % d\r\n}\r\n", "import { clamp, damp } from './maths'\r\n\r\n// Animate class to handle value animations with lerping or easing\r\nexport class Animate {\r\n  isRunning: boolean = false\r\n  value: number = 0\r\n  from: number = 0\r\n  to: number = 0\r\n  lerp?: number\r\n  duration?: number = 0\r\n  easing?: Function\r\n  currentTime: number = 0\r\n  onUpdate?: Function\r\n\r\n  // Advance the animation by the given delta time\r\n  advance(deltaTime: number) {\r\n    if (!this.isRunning) return\r\n\r\n    let completed = false\r\n\r\n    if (this.duration && this.easing) {\r\n      this.currentTime += deltaTime\r\n      const linearProgress = clamp(0, this.currentTime / this.duration, 1)\r\n\r\n      completed = linearProgress >= 1\r\n      const easedProgress = completed ? 1 : this.easing(linearProgress)\r\n      this.value = this.from + (this.to - this.from) * easedProgress\r\n    } else if (this.lerp) {\r\n      this.value = damp(this.value, this.to, this.lerp * 60, deltaTime)\r\n      if (Math.round(this.value) === this.to) {\r\n        this.value = this.to\r\n        completed = true\r\n      }\r\n    } else {\r\n      // If no easing or lerp, just jump to the end value\r\n      this.value = this.to\r\n      completed = true\r\n    }\r\n\r\n    if (completed) {\r\n      this.stop()\r\n    }\r\n\r\n    // Call the onUpdate callback with the current value and completed status\r\n    this.onUpdate?.(this.value, completed)\r\n  }\r\n\r\n  // Stop the animation\r\n  stop() {\r\n    this.isRunning = false\r\n  }\r\n\r\n  // Set up the animation from a starting value to an ending value\r\n  // with optional parameters for lerping, duration, easing, and onUpdate callback\r\n  fromTo(\r\n    from: number,\r\n    to: number,\r\n    {\r\n      lerp,\r\n      duration,\r\n      easing,\r\n      onStart,\r\n      onUpdate,\r\n    }: {\r\n      lerp?: number\r\n      duration?: number\r\n      easing?: Function\r\n      onStart?: Function\r\n      onUpdate?: Function\r\n    }\r\n  ) {\r\n    this.from = this.value = from\r\n    this.to = to\r\n    this.lerp = lerp\r\n    this.duration = duration\r\n    this.easing = easing\r\n    this.currentTime = 0\r\n    this.isRunning = true\r\n\r\n    onStart?.()\r\n    this.onUpdate = onUpdate\r\n  }\r\n}\r\n", "import { debounce } from './debounce'\r\n\r\ntype DimensionsOptions = {\r\n  wrapper: Window | HTMLElement\r\n  content: HTMLElement\r\n  autoResize?: boolean\r\n  debounce?: number\r\n}\r\n\r\nexport class Dimensions {\r\n  wrapper: Window | HTMLElement\r\n  content: HTMLElement\r\n  width: number = 0\r\n  height: number = 0\r\n  scrollWidth: number = 0\r\n  scrollHeight: number = 0\r\n  debouncedResize?: Function\r\n  wrapperResizeObserver?: ResizeObserver\r\n  contentResizeObserver?: ResizeObserver\r\n\r\n  // @ts-ignore\r\n  constructor({\r\n    wrapper,\r\n    content,\r\n    autoResize = true,\r\n    debounce: debounceValue = 250,\r\n  }: DimensionsOptions = {}) {\r\n    this.wrapper = wrapper\r\n    this.content = content\r\n\r\n    if (autoResize) {\r\n      this.debouncedResize = debounce(this.resize, debounceValue)\r\n\r\n      if (this.wrapper === window) {\r\n        window.addEventListener(\r\n          'resize',\r\n          this.debouncedResize as EventListener,\r\n          false\r\n        )\r\n      } else {\r\n        this.wrapperResizeObserver = new ResizeObserver(\r\n          this.debouncedResize as ResizeObserverCallback\r\n        )\r\n        this.wrapperResizeObserver.observe(this.wrapper as HTMLElement)\r\n      }\r\n\r\n      this.contentResizeObserver = new ResizeObserver(\r\n        this.debouncedResize as ResizeObserverCallback\r\n      )\r\n      this.contentResizeObserver.observe(this.content)\r\n    }\r\n\r\n    this.resize()\r\n  }\r\n\r\n  destroy() {\r\n    this.wrapperResizeObserver?.disconnect()\r\n    this.contentResizeObserver?.disconnect()\r\n    window.removeEventListener(\r\n      'resize',\r\n      this.debouncedResize as EventListener,\r\n      false\r\n    )\r\n  }\r\n\r\n  resize = () => {\r\n    this.onWrapperResize()\r\n    this.onContentResize()\r\n  }\r\n\r\n  onWrapperResize = () => {\r\n    if (this.wrapper === window) {\r\n      this.width = window.innerWidth\r\n      this.height = window.innerHeight\r\n    } else if (this.wrapper instanceof HTMLElement) {\r\n      this.width = this.wrapper.clientWidth\r\n      this.height = this.wrapper.clientHeight\r\n    }\r\n  }\r\n\r\n  onContentResize = () => {\r\n    if (this.wrapper === window) {\r\n      this.scrollHeight = this.content.scrollHeight\r\n      this.scrollWidth = this.content.scrollWidth\r\n    } else if (this.wrapper instanceof HTMLElement) {\r\n      this.scrollHeight = this.wrapper.scrollHeight\r\n      this.scrollWidth = this.wrapper.scrollWidth\r\n    }\r\n  }\r\n\r\n  get limit(): {\r\n    x: number\r\n    y: number\r\n  } {\r\n    return {\r\n      x: this.scrollWidth - this.width,\r\n      y: this.scrollHeight - this.height,\r\n    }\r\n  }\r\n}\r\n", "export function debounce(callback, delay) {\r\n  let timer\r\n  return function () {\r\n    let args = arguments\r\n    let context = this\r\n    clearTimeout(timer)\r\n    timer = setTimeout(function () {\r\n      callback.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n", "export class Emitter {\r\n  events: Record<string, Function[]>\r\n\r\n  constructor() {\r\n    this.events = {}\r\n  }\r\n\r\n  emit(event: string, ...args: any[]) {\r\n    let callbacks = this.events[event] || []\r\n    for (let i = 0, length = callbacks.length; i < length; i++) {\r\n      callbacks[i](...args)\r\n    }\r\n  }\r\n\r\n  on(event: string, callback: Function) {\r\n    // Add the callback to the event's callback list, or create a new list with the callback\r\n    this.events[event]?.push(callback) || (this.events[event] = [callback])\r\n\r\n    // Return an unsubscribe function\r\n    return () => {\r\n      this.events[event] = this.events[event]?.filter((i) => callback !== i)\r\n    }\r\n  }\r\n\r\n  off(event: string, callback: Function) {\r\n    this.events[event] = this.events[event]?.filter((i) => callback !== i)\r\n  }\r\n\r\n  destroy() {\r\n    this.events = {}\r\n  }\r\n}\r\n", "import { Emitter } from './emitter'\r\n\r\nconst LINE_HEIGHT = 100 / 6\r\n\r\nexport class VirtualScroll {\r\n  element: HTMLElement | Window\r\n  wheelMultiplier: number\r\n  touchMultiplier: number\r\n  touchStart: {\r\n    x: number | null\r\n    y: number | null\r\n  }\r\n  emitter: Emitter\r\n  lastDelta: {\r\n    x: number\r\n    y: number\r\n  } = {\r\n    x: 0,\r\n    y: 0,\r\n  }\r\n  windowWidth: number = 0\r\n  windowHeight: number = 0\r\n\r\n  constructor(\r\n    element: HTMLElement | Window,\r\n    { wheelMultiplier = 1, touchMultiplier = 1 }\r\n  ) {\r\n    this.element = element\r\n    this.wheelMultiplier = wheelMultiplier\r\n    this.touchMultiplier = touchMultiplier\r\n\r\n    this.touchStart = {\r\n      x: null,\r\n      y: null,\r\n    }\r\n\r\n    this.emitter = new Emitter()\r\n    window.addEventListener('resize', this.onWindowResize, false)\r\n    this.onWindowResize()\r\n\r\n    this.element.addEventListener('wheel', this.onWheel as EventListener, {\r\n      passive: false,\r\n    })\r\n    this.element.addEventListener(\r\n      'touchstart',\r\n      this.onTouchStart as EventListener,\r\n      {\r\n        passive: false,\r\n      }\r\n    )\r\n    this.element.addEventListener(\r\n      'touchmove',\r\n      this.onTouchMove as EventListener,\r\n      {\r\n        passive: false,\r\n      }\r\n    )\r\n    this.element.addEventListener(\r\n      'touchend',\r\n      this.onTouchEnd as EventListener,\r\n      {\r\n        passive: false,\r\n      }\r\n    )\r\n  }\r\n\r\n  // Add an event listener for the given event and callback\r\n  on(event: string, callback: Function) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  // Remove all event listeners and clean up\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    window.removeEventListener('resize', this.onWindowResize, false)\r\n\r\n    this.element.removeEventListener('wheel', this.onWheel as EventListener)\r\n    this.element.removeEventListener(\r\n      'touchstart',\r\n      this.onTouchStart as EventListener\r\n    )\r\n    this.element.removeEventListener(\r\n      'touchmove',\r\n      this.onTouchMove as EventListener\r\n    )\r\n    this.element.removeEventListener(\r\n      'touchend',\r\n      this.onTouchEnd as EventListener\r\n    )\r\n  }\r\n\r\n  // Event handler for 'touchstart' event\r\n  onTouchStart = (event: TouchEvent) => {\r\n    // @ts-expect-error\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: 0,\r\n      y: 0,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX: 0,\r\n      deltaY: 0,\r\n      event,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'touchmove' event\r\n  onTouchMove = (event: TouchEvent) => {\r\n    // @ts-expect-error\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    const deltaX = -(clientX - (this.touchStart?.x ?? 0)) * this.touchMultiplier\r\n    const deltaY = -(clientY - (this.touchStart?.y ?? 0)) * this.touchMultiplier\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: deltaX,\r\n      y: deltaY,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX,\r\n      deltaY,\r\n      event,\r\n    })\r\n  }\r\n\r\n  onTouchEnd = (event: TouchEvent) => {\r\n    this.emitter.emit('scroll', {\r\n      deltaX: this.lastDelta.x,\r\n      deltaY: this.lastDelta.y,\r\n      event,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'wheel' event\r\n  onWheel = (event: WheelEvent) => {\r\n    let { deltaX, deltaY, deltaMode } = event\r\n\r\n    const multiplierX =\r\n      deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.windowWidth : 1\r\n    const multiplierY =\r\n      deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.windowHeight : 1\r\n\r\n    deltaX *= multiplierX\r\n    deltaY *= multiplierY\r\n\r\n    deltaX *= this.wheelMultiplier\r\n    deltaY *= this.wheelMultiplier\r\n\r\n    this.emitter.emit('scroll', { deltaX, deltaY, event })\r\n  }\r\n\r\n  onWindowResize = () => {\r\n    this.windowWidth = window.innerWidth\r\n    this.windowHeight = window.innerHeight\r\n  }\r\n}\r\n", "import { version } from '../../../package.json'\r\nimport { Animate } from './animate'\r\nimport { Dimensions } from './dimensions'\r\nimport { Emitter } from './emitter'\r\nimport { clamp, modulo } from './maths'\r\nimport { VirtualScroll } from './virtual-scroll'\r\n\r\n// Technical explanation\r\n// - listen to 'wheel' events\r\n// - prevent 'wheel' event to prevent scroll\r\n// - normalize wheel delta\r\n// - add delta to targetScroll\r\n// - animate scroll to targetScroll (smooth context)\r\n// - if animation is not running, listen to 'scroll' events (native context)\r\n\r\ntype Overwrite<T, R> = Omit<T, keyof R> & R\r\n\r\ntype EasingFunction = (t: number) => number\r\ntype Orientation = 'vertical' | 'horizontal'\r\ntype GestureOrientation = 'vertical' | 'horizontal' | 'both'\r\ntype Scrolling = boolean | 'native' | 'smooth'\r\n\r\ntype onVirtualScrollOptions = {\r\n  deltaX: number\r\n  deltaY: number\r\n  event: WheelEvent | TouchEvent\r\n}\r\n\r\nexport type LenisOptions = Partial<{\r\n  wrapper: Window | HTMLElement\r\n  content: HTMLElement\r\n  wheelEventsTarget: Window | HTMLElement\r\n  eventsTarget: Window | HTMLElement\r\n  smoothWheel: boolean\r\n  syncTouch: boolean\r\n  syncTouchLerp: number\r\n  touchInertiaMultiplier: number\r\n  duration: number\r\n  easing: EasingFunction\r\n  lerp: number\r\n  infinite: boolean\r\n  orientation: Orientation\r\n  gestureOrientation: GestureOrientation\r\n  touchMultiplier: number\r\n  wheelMultiplier: number\r\n  autoResize: boolean\r\n  prevent: (node: Element) => boolean\r\n  virtualScroll: (data: onVirtualScrollOptions) => boolean\r\n  __experimental__naiveDimensions: boolean\r\n}>\r\n\r\nexport default class Lenis {\r\n  // __isSmooth: boolean = false // true if scroll should be animated\r\n  __isScrolling: Scrolling = false // true when scroll is animating\r\n  __isStopped: boolean = false // true if user should not be able to scroll - enable/disable programmatically\r\n  __isLocked: boolean = false // same as isStopped but enabled/disabled when scroll reaches target\r\n  __preventNextNativeScrollEvent?: boolean\r\n  __resetVelocityTimeout?: number\r\n\r\n  isTouching?: boolean\r\n  time: number\r\n  userData: Object = {}\r\n  lastVelocity: number = 0\r\n  velocity: number = 0\r\n  direction: 1 | -1 | 0 = 0\r\n  options: Overwrite<\r\n    LenisOptions,\r\n    {\r\n      wrapper: NonNullable<LenisOptions['wrapper']>\r\n    }\r\n  >\r\n  targetScroll: number\r\n  animatedScroll: number\r\n  animate: Animate\r\n  emitter: Emitter\r\n  dimensions: Dimensions\r\n  virtualScroll: VirtualScroll\r\n\r\n  constructor({\r\n    wrapper = window,\r\n    content = document.documentElement,\r\n    wheelEventsTarget = wrapper, // deprecated\r\n    eventsTarget = wheelEventsTarget,\r\n    smoothWheel = true,\r\n    syncTouch = false,\r\n    syncTouchLerp = 0.075,\r\n    touchInertiaMultiplier = 35,\r\n    duration, // in seconds\r\n    easing = (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\r\n    lerp = 0.1,\r\n    infinite = false,\r\n    orientation = 'vertical', // vertical, horizontal\r\n    gestureOrientation = 'vertical', // vertical, horizontal, both\r\n    touchMultiplier = 1,\r\n    wheelMultiplier = 1,\r\n    autoResize = true,\r\n    prevent,\r\n    virtualScroll,\r\n    __experimental__naiveDimensions = false,\r\n  }: LenisOptions = {}) {\r\n    // @ts-expect-error\r\n    window.lenisVersion = version\r\n\r\n    // if wrapper is html or body, fallback to window\r\n    if (\r\n      !wrapper ||\r\n      wrapper === document.documentElement ||\r\n      wrapper === document.body\r\n    ) {\r\n      wrapper = window\r\n    }\r\n\r\n    this.options = {\r\n      wrapper,\r\n      content,\r\n      wheelEventsTarget,\r\n      eventsTarget,\r\n      smoothWheel,\r\n      syncTouch,\r\n      syncTouchLerp,\r\n      touchInertiaMultiplier,\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      infinite,\r\n      gestureOrientation,\r\n      orientation,\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n      autoResize,\r\n      prevent,\r\n      virtualScroll,\r\n      __experimental__naiveDimensions,\r\n    } as LenisOptions\r\n\r\n    this.animate = new Animate()\r\n    this.emitter = new Emitter()\r\n    this.dimensions = new Dimensions({ wrapper, content, autoResize })\r\n    // this.toggleClassName('lenis', true)\r\n    this.updateClassName()\r\n\r\n    this.userData = {}\r\n    this.time = 0\r\n    this.velocity = this.lastVelocity = 0\r\n    this.isLocked = false\r\n    this.isStopped = false\r\n    // this.hasScrolled = false\r\n    // this.isSmooth = syncTouch || smoothWheel\r\n    // this.isSmooth = false\r\n    this.isScrolling = false\r\n    this.targetScroll = this.animatedScroll = this.actualScroll\r\n\r\n    this.options.wrapper.addEventListener('scroll', this.onNativeScroll, false)\r\n\r\n    this.options.wrapper.addEventListener(\r\n      'pointerdown',\r\n      this.onPointerDown as EventListener,\r\n      false\r\n    )\r\n\r\n    this.virtualScroll = new VirtualScroll(eventsTarget, {\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n    })\r\n    this.virtualScroll.on('scroll', this.onVirtualScroll)\r\n  }\r\n\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    this.options.wrapper.removeEventListener(\r\n      'scroll',\r\n      this.onNativeScroll,\r\n      false\r\n    )\r\n    this.options.wrapper.removeEventListener(\r\n      'pointerdown',\r\n      this.onPointerDown as EventListener,\r\n      false\r\n    )\r\n\r\n    this.virtualScroll.destroy()\r\n    this.dimensions.destroy()\r\n\r\n    this.cleanUpClassName()\r\n\r\n    // this.rootElement.className = ''\r\n\r\n    // this.toggleClassName('lenis', false)\r\n    // this.toggleClassName('lenis-smooth', false)\r\n    // this.toggleClassName('lenis-scrolling', false)\r\n    // this.toggleClassName('lenis-stopped', false)\r\n    // this.toggleClassName('lenis-locked', false)\r\n  }\r\n\r\n  on(event: string, callback: Function) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  off(event: string, callback: Function) {\r\n    return this.emitter.off(event, callback)\r\n  }\r\n\r\n  private setScroll(scroll: number) {\r\n    // apply scroll value immediately\r\n    if (this.isHorizontal) {\r\n      this.rootElement.scrollLeft = scroll\r\n    } else {\r\n      this.rootElement.scrollTop = scroll\r\n    }\r\n  }\r\n\r\n  private onPointerDown = (event: PointerEvent | MouseEvent) => {\r\n    if (event.button === 1) {\r\n      this.reset()\r\n    }\r\n  }\r\n\r\n  private onVirtualScroll = (data: onVirtualScrollOptions) => {\r\n    if (\r\n      typeof this.options.virtualScroll === 'function' &&\r\n      this.options.virtualScroll(data) === false\r\n    )\r\n      return\r\n\r\n    const { deltaX, deltaY, event } = data\r\n\r\n    this.emitter.emit('virtual-scroll', { deltaX, deltaY, event })\r\n\r\n    // keep zoom feature\r\n    if (event.ctrlKey) return\r\n\r\n    const isTouch = event.type.includes('touch')\r\n    const isWheel = event.type.includes('wheel')\r\n\r\n    this.isTouching = event.type === 'touchstart' || event.type === 'touchmove'\r\n    // if (event.type === 'touchend') {\r\n    //   console.log('touchend', this.scroll)\r\n    //   // this.lastVelocity = this.velocity\r\n    //   // this.velocity = 0\r\n    //   // this.isScrolling = false\r\n    //   this.emit({ type: 'touchend' })\r\n    //   // alert('touchend')\r\n    //   return\r\n    // }\r\n\r\n    const isTapToStop =\r\n      this.options.syncTouch &&\r\n      isTouch &&\r\n      event.type === 'touchstart' &&\r\n      !this.isStopped &&\r\n      !this.isLocked\r\n\r\n    if (isTapToStop) {\r\n      this.reset()\r\n      return\r\n    }\r\n\r\n    const isClick = deltaX === 0 && deltaY === 0 // click event\r\n\r\n    // const isPullToRefresh =\r\n    //   this.options.gestureOrientation === 'vertical' &&\r\n    //   this.scroll === 0 &&\r\n    //   !this.options.infinite &&\r\n    //   deltaY <= 5 // touch pull to refresh, not reliable yet\r\n\r\n    const isUnknownGesture =\r\n      (this.options.gestureOrientation === 'vertical' && deltaY === 0) ||\r\n      (this.options.gestureOrientation === 'horizontal' && deltaX === 0)\r\n\r\n    if (isClick || isUnknownGesture) {\r\n      // console.log('prevent')\r\n      return\r\n    }\r\n\r\n    // catch if scrolling on nested scroll elements\r\n    let composedPath = event.composedPath()\r\n    composedPath = composedPath.slice(0, composedPath.indexOf(this.rootElement)) // remove parents elements\r\n\r\n    const prevent = this.options.prevent\r\n\r\n    if (\r\n      !!composedPath.find(\r\n        (node) =>\r\n          node instanceof Element &&\r\n          ((typeof prevent === 'function' && prevent?.(node)) ||\r\n            node.hasAttribute?.('data-lenis-prevent') ||\r\n            (isTouch && node.hasAttribute?.('data-lenis-prevent-touch')) ||\r\n            (isWheel && node.hasAttribute?.('data-lenis-prevent-wheel')) ||\r\n            (node.classList?.contains('lenis') &&\r\n              !node.classList?.contains('lenis-stopped'))) // nested lenis instance\r\n      )\r\n    )\r\n      return\r\n\r\n    if (this.isStopped || this.isLocked) {\r\n      event.preventDefault() // this will stop forwarding the event to the parent, this is problematic\r\n      return\r\n    }\r\n\r\n    const isSmooth =\r\n      (this.options.syncTouch && isTouch) ||\r\n      (this.options.smoothWheel && isWheel)\r\n\r\n    if (!isSmooth) {\r\n      this.isScrolling = 'native'\r\n      this.animate.stop()\r\n      return\r\n    }\r\n\r\n    event.preventDefault()\r\n\r\n    let delta = deltaY\r\n    if (this.options.gestureOrientation === 'both') {\r\n      delta = Math.abs(deltaY) > Math.abs(deltaX) ? deltaY : deltaX\r\n    } else if (this.options.gestureOrientation === 'horizontal') {\r\n      delta = deltaX\r\n    }\r\n\r\n    const syncTouch = isTouch && this.options.syncTouch\r\n    const isTouchEnd = isTouch && event.type === 'touchend'\r\n\r\n    const hasTouchInertia = isTouchEnd && Math.abs(delta) > 5\r\n\r\n    if (hasTouchInertia) {\r\n      delta = this.velocity * this.options.touchInertiaMultiplier\r\n    }\r\n\r\n    this.scrollTo(this.targetScroll + delta, {\r\n      programmatic: false,\r\n      ...(syncTouch\r\n        ? {\r\n            lerp: hasTouchInertia ? this.options.syncTouchLerp : 1,\r\n          }\r\n        : {\r\n            lerp: this.options.lerp,\r\n            duration: this.options.duration,\r\n            easing: this.options.easing,\r\n          }),\r\n    })\r\n  }\r\n\r\n  resize() {\r\n    this.dimensions.resize()\r\n  }\r\n\r\n  private emit() {\r\n    this.emitter.emit('scroll', this)\r\n  }\r\n\r\n  private onNativeScroll = () => {\r\n    clearTimeout(this.__resetVelocityTimeout)\r\n    delete this.__resetVelocityTimeout\r\n\r\n    if (this.__preventNextNativeScrollEvent) {\r\n      delete this.__preventNextNativeScrollEvent\r\n      return\r\n    }\r\n\r\n    if (this.isScrolling === false || this.isScrolling === 'native') {\r\n      const lastScroll = this.animatedScroll\r\n      this.animatedScroll = this.targetScroll = this.actualScroll\r\n      this.lastVelocity = this.velocity\r\n      this.velocity = this.animatedScroll - lastScroll\r\n      this.direction = Math.sign(\r\n        this.animatedScroll - lastScroll\r\n      ) as Lenis['direction']\r\n      // this.isSmooth = false\r\n      this.isScrolling = 'native'\r\n      this.emit()\r\n\r\n      if (this.velocity !== 0) {\r\n        this.__resetVelocityTimeout = setTimeout(() => {\r\n          this.lastVelocity = this.velocity\r\n          this.velocity = 0\r\n          this.isScrolling = false\r\n          this.emit()\r\n        }, 400)\r\n      }\r\n\r\n      // this.hasScrolled = true\r\n      // }, 50)\r\n    }\r\n  }\r\n\r\n  private reset() {\r\n    this.isLocked = false\r\n    this.isScrolling = false\r\n    this.animatedScroll = this.targetScroll = this.actualScroll\r\n    this.lastVelocity = this.velocity = 0\r\n    this.animate.stop()\r\n  }\r\n\r\n  start() {\r\n    if (!this.isStopped) return\r\n    this.isStopped = false\r\n\r\n    this.reset()\r\n  }\r\n\r\n  stop() {\r\n    if (this.isStopped) return\r\n    this.isStopped = true\r\n    this.animate.stop()\r\n\r\n    this.reset()\r\n  }\r\n\r\n  raf(time: number) {\r\n    const deltaTime = time - (this.time || time)\r\n    this.time = time\r\n\r\n    this.animate.advance(deltaTime * 0.001)\r\n  }\r\n\r\n  scrollTo(\r\n    target: number | string | HTMLElement,\r\n    {\r\n      offset = 0,\r\n      immediate = false,\r\n      lock = false,\r\n      duration = this.options.duration,\r\n      easing = this.options.easing,\r\n      lerp = this.options.lerp,\r\n      onStart,\r\n      onComplete,\r\n      force = false, // scroll even if stopped\r\n      programmatic = true, // called from outside of the class\r\n      userData = {},\r\n    }: {\r\n      offset?: number\r\n      immediate?: boolean\r\n      lock?: boolean\r\n      duration?: number\r\n      easing?: EasingFunction\r\n      lerp?: number\r\n      onStart?: (lenis: Lenis) => void\r\n      onComplete?: (lenis: Lenis) => void\r\n      force?: boolean\r\n      programmatic?: boolean\r\n      userData?: object\r\n    } = {}\r\n  ) {\r\n    if ((this.isStopped || this.isLocked) && !force) return\r\n\r\n    // keywords\r\n    if (\r\n      typeof target === 'string' &&\r\n      ['top', 'left', 'start'].includes(target)\r\n    ) {\r\n      target = 0\r\n    } else if (\r\n      typeof target === 'string' &&\r\n      ['bottom', 'right', 'end'].includes(target)\r\n    ) {\r\n      target = this.limit\r\n    } else {\r\n      let node\r\n\r\n      if (typeof target === 'string') {\r\n        // CSS selector\r\n        node = document.querySelector(target)\r\n      } else if (target instanceof HTMLElement && target?.nodeType) {\r\n        // Node element\r\n        node = target\r\n      }\r\n\r\n      if (node) {\r\n        if (this.options.wrapper !== window) {\r\n          // nested scroll offset correction\r\n          const wrapperRect = this.rootElement.getBoundingClientRect()\r\n          offset -= this.isHorizontal ? wrapperRect.left : wrapperRect.top\r\n        }\r\n\r\n        const rect = node.getBoundingClientRect()\r\n\r\n        target =\r\n          (this.isHorizontal ? rect.left : rect.top) + this.animatedScroll\r\n      }\r\n    }\r\n\r\n    if (typeof target !== 'number') return\r\n\r\n    target += offset\r\n    target = Math.round(target)\r\n\r\n    if (this.options.infinite) {\r\n      if (programmatic) {\r\n        this.targetScroll = this.animatedScroll = this.scroll\r\n      }\r\n    } else {\r\n      target = clamp(0, target, this.limit)\r\n    }\r\n\r\n    if (target === this.targetScroll) return\r\n\r\n    this.userData = userData\r\n\r\n    if (immediate) {\r\n      this.animatedScroll = this.targetScroll = target\r\n      this.setScroll(this.scroll)\r\n      this.reset()\r\n      this.preventNextNativeScrollEvent()\r\n      this.emit()\r\n      onComplete?.(this)\r\n      this.userData = {}\r\n      return\r\n    }\r\n\r\n    if (!programmatic) {\r\n      this.targetScroll = target\r\n    }\r\n\r\n    this.animate.fromTo(this.animatedScroll, target, {\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      onStart: () => {\r\n        // started\r\n        if (lock) this.isLocked = true\r\n        this.isScrolling = 'smooth'\r\n        onStart?.(this)\r\n      },\r\n      onUpdate: (value: number, completed: boolean) => {\r\n        this.isScrolling = 'smooth'\r\n\r\n        // updated\r\n        this.lastVelocity = this.velocity\r\n        this.velocity = value - this.animatedScroll\r\n        this.direction = Math.sign(this.velocity) as Lenis['direction']\r\n\r\n        this.animatedScroll = value\r\n        this.setScroll(this.scroll)\r\n\r\n        if (programmatic) {\r\n          // wheel during programmatic should stop it\r\n          this.targetScroll = value\r\n        }\r\n\r\n        if (!completed) this.emit()\r\n\r\n        if (completed) {\r\n          this.reset()\r\n          this.emit()\r\n          onComplete?.(this)\r\n          this.userData = {}\r\n\r\n          // avoid emitting event twice\r\n          this.preventNextNativeScrollEvent()\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  private preventNextNativeScrollEvent() {\r\n    this.__preventNextNativeScrollEvent = true\r\n\r\n    requestAnimationFrame(() => {\r\n      delete this.__preventNextNativeScrollEvent\r\n    })\r\n  }\r\n\r\n  get rootElement() {\r\n    return (\r\n      this.options.wrapper === window\r\n        ? document.documentElement\r\n        : this.options.wrapper\r\n    ) as HTMLElement\r\n  }\r\n\r\n  get limit() {\r\n    if (this.options.__experimental__naiveDimensions) {\r\n      if (this.isHorizontal) {\r\n        return this.rootElement.scrollWidth - this.rootElement.clientWidth\r\n      } else {\r\n        return this.rootElement.scrollHeight - this.rootElement.clientHeight\r\n      }\r\n    } else {\r\n      return this.dimensions.limit[this.isHorizontal ? 'x' : 'y']\r\n    }\r\n  }\r\n\r\n  get isHorizontal() {\r\n    return this.options.orientation === 'horizontal'\r\n  }\r\n\r\n  get actualScroll(): number {\r\n    // value browser takes into account\r\n    return this.isHorizontal\r\n      ? this.rootElement.scrollLeft\r\n      : this.rootElement.scrollTop\r\n  }\r\n\r\n  get scroll(): number {\r\n    return this.options.infinite\r\n      ? modulo(this.animatedScroll, this.limit)\r\n      : this.animatedScroll\r\n  }\r\n\r\n  get progress(): number {\r\n    // avoid progress to be NaN\r\n    return this.limit === 0 ? 1 : this.scroll / this.limit\r\n  }\r\n\r\n  // get isSmooth() {\r\n  //   return this.__isSmooth\r\n  // }\r\n\r\n  // private set isSmooth(value: boolean) {\r\n  //   if (this.__isSmooth !== value) {\r\n  //     this.__isSmooth = value\r\n  //     this.updateClassName()\r\n  //   }\r\n  // }\r\n\r\n  get isScrolling() {\r\n    return this.__isScrolling\r\n  }\r\n\r\n  private set isScrolling(value: Scrolling) {\r\n    if (this.__isScrolling !== value) {\r\n      this.__isScrolling = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  get isStopped() {\r\n    return this.__isStopped\r\n  }\r\n\r\n  private set isStopped(value: boolean) {\r\n    if (this.__isStopped !== value) {\r\n      this.__isStopped = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  get isLocked() {\r\n    return this.__isLocked\r\n  }\r\n\r\n  private set isLocked(value: boolean) {\r\n    if (this.__isLocked !== value) {\r\n      this.__isLocked = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  get isSmooth() {\r\n    return this.isScrolling === 'smooth'\r\n  }\r\n\r\n  get className() {\r\n    let className = 'lenis'\r\n    if (this.isStopped) className += ' lenis-stopped'\r\n    if (this.isLocked) className += ' lenis-locked'\r\n    if (this.isScrolling) className += ' lenis-scrolling'\r\n    if (this.isScrolling === 'smooth') className += ' lenis-smooth'\r\n    // if (this.isScrolling === 'native') className += ' lenis-native'\r\n    // if (this.isSmooth) className += ' lenis-smooth'\r\n    return className\r\n  }\r\n\r\n  private updateClassName() {\r\n    this.cleanUpClassName()\r\n\r\n    this.rootElement.className =\r\n      `${this.rootElement.className} ${this.className}`.trim()\r\n  }\r\n\r\n  private cleanUpClassName() {\r\n    this.rootElement.className = this.rootElement.className\r\n      .replace(/lenis(-\\w+)?/g, '')\r\n      .trim()\r\n  }\r\n}\r\n", "/**\n * Intersection Observer\n *\n * Detecting visibility of an element in the viewport.\n *\n * Features functions to:\n *\n * - Trigger inview/outOfView callbacks\n * - If the element has a requestAnimationFrame dependency, set interactivy status for the ScrollElement Class\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API}\n */\n\nimport type { IIOOptions } from '../types';\nimport ScrollElement from './ScrollElement';\n\nexport default class IO {\n    public scrollElements: ScrollElement[];\n    private rootMargin: string;\n    private IORaf: boolean;\n    private observer!: IntersectionObserver;\n\n    constructor({\n        scrollElements,\n        rootMargin = '-1px -1px -1px -1px',\n        IORaf,\n    }: IIOOptions) {\n        // Parameters\n        this.scrollElements = scrollElements;\n        this.rootMargin = rootMargin;\n        this.IORaf = IORaf;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Intersection Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Options\n        const observerOptions = {\n            rootMargin: this.rootMargin,\n        };\n\n        // Callback\n        const onIntersect = (entries: IntersectionObserverEntry[]) => {\n            entries.forEach((entry) => {\n                const $targetItem: ScrollElement | undefined =\n                    this.scrollElements.find(\n                        (item) => item.$el === entry.target\n                    );\n\n                if (entry.isIntersecting) {\n                    $targetItem && ($targetItem.isAlreadyIntersected = true);\n                    this._setInview(entry);\n                } else if ($targetItem && $targetItem.isAlreadyIntersected) {\n                    this._setOutOfView(entry);\n                }\n            });\n        };\n\n        // Instance\n        this.observer = new IntersectionObserver(onIntersect, observerOptions);\n\n        // Observe each default elements\n        for (const scrollElement of this.scrollElements) {\n            const $scrollElement = scrollElement.$el;\n            this.observe($scrollElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Intersection Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n\n    /**\n     * Subscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to observe.\n     */\n    public observe($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.observe($scrollElement);\n    }\n\n    /**\n     * Unsubscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to unobserve.\n     */\n    public unobserve($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.unobserve($scrollElement);\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger inview callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setInview(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOn();\n        !this.IORaf && scrollElement?.setInview();\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger out of view callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setOutOfView(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOff();\n        !this.IORaf && scrollElement?.setOutOfView();\n\n        // Unobserve if element doesn't have repeat attribute\n        if (!scrollElement?.attributes.scrollRepeat && !this.IORaf) {\n            this.unobserve(entry.target as HTMLElement);\n        }\n    }\n}\n", "// https://greensock.com/docs/v3/GSAP/gsap.utils\n\n/**\n * Clamp a value to fit within a specific range (ex: clamp(0, 100, -12) --> 0).\n *\n * @param {number} min   - Minimum value expected.\n * @param {number} max   - Maximum value expected.\n * @param {number} value - Current value.\n *\n * @returns {number} - Clamped value.\n */\nexport function clamp(min: number, max: number, value: number): number {\n    return value < min ? min : value > max ? max : value;\n}\n\n/**\n * Map one range to another (ex: mapRange(-10, 10, 0, 100, 5) --> 75).\n *\n * @param {number} inMin  - Current minimum value.\n * @param {number} inMax  - Current maximum value.\n * @param {number} outMin - Maximum value expected.\n * @param {number} outMax - Maximum value expected.\n * @param {number} value  - Current value.\n *\n * @returns {number} - New value that should be between minimum value expected and maximum value.\n */\nexport function mapRange(\n    inMin: number,\n    inMax: number,\n    outMin: number,\n    outMax: number,\n    value: number\n): number {\n    const inRange = inMax - inMin;\n    const outRange = outMax - outMin;\n    return outMin + (((value - inMin) / inRange) * outRange || 0);\n}\n\n/**\n * Map a number within a range to a progress between 0 to 1 (ex: normalize(100, 200, 150) --> 0.5).\n *\n * @param {number} min   - Current minimum value.\n * @param {number} max   - Current maximum value.\n * @param {number} value - Current value.\n *\n * @returns {number} - New value that should be between 0 and 1.\n */\nexport function normalize(min: number, max: number, value: number): number {\n    return mapRange(min, max, 0, 1, value);\n}\n\n/**\n * Get closest number from an array.\n *\n * @param {number[]} array  - Numbers array.\n * @param {number}   target - Reference value.\n *\n * @returns {number} - Closest number.\n */\nexport function closestNumber(array: number[], target: number): number {\n    return array.reduce((prev, curr) => {\n        return Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev;\n    });\n}\n", "/**\n * Scroll Element\n *\n * Give tools to compute element progress in the viewport and triggers callbacks to animate it.\n *\n * Features functions to:\n *\n * - scrollClass - Add a custom class when the element is intersected by the offset\n * - scrollOffset - Determine offsets to intersect the element\n * - scrollPosition - Determine the element positions to consider an element as intersected.\n * - scrollModuleProgress - Send scroll progress to modular module that have a specific method (PROGRESS_MODULAR_METHOD)\n * - scrollCssProgress - Add a specific css variable (PROGRESS_CSS_VAR) that store the scroll progress\n * - scrollEventProgress - Send scroll progress to custom event listeners.\n * - scrollSpeed - Add a scroll multiplicator to create a parallax effect\n * - scrollRepeat - Repeat the option to trigger animation each time the element is intersected\n * - scrollCall - Call a custom event or a modular callback when the element is intersected\n */\n\nimport type {\n    IModular,\n    IScrollElementOptions,\n    IScrollElementAttributes,\n    IScrollElementIntersection,\n    IScrollElementMetrics,\n    IProgressModularModules,\n    IScrollElementCallbacksValues,\n    scrollCallWay,\n    scrollCallFrom,\n    scrollOrientation,\n} from '../types';\nimport { clamp, closestNumber, normalize, mapRange } from '../utils/maths';\n\n/** Constants */\nconst INVIEW_CLASS = 'is-inview';\nconst PROGRESS_CSS_VAR = '--progress';\nconst PROGRESS_MODULAR_METHOD = 'onScrollProgress';\n\nexport default class ScrollElement {\n    public $el: HTMLElement;\n    public id: number;\n    public needRaf: boolean;\n    public attributes: IScrollElementAttributes;\n    public scrollOrientation: scrollOrientation;\n    public isAlreadyIntersected: boolean;\n\n    private intersection: IScrollElementIntersection;\n    private metrics: IScrollElementMetrics;\n    private currentScroll: number;\n    private translateValue: number;\n    private progress: number;\n    private lastProgress: number | null;\n    private modularInstance?: IModular;\n    private progressModularModules: IProgressModularModules[];\n    private isInview: boolean;\n    private isInteractive: boolean;\n    private isInFold: boolean;\n    private isFirstResize: boolean;\n\n    private subscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n    private unsubscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n\n    constructor({\n        $el,\n        id,\n        modularInstance,\n        subscribeElementUpdateFn,\n        unsubscribeElementUpdateFn,\n        needRaf,\n        scrollOrientation,\n    }: IScrollElementOptions) {\n        // Scroll DOM element\n        this.$el = $el;\n        // Unique ID\n        this.id = id;\n        // RAF option\n        this.needRaf = needRaf;\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n        // Modular.js\n        this.modularInstance = modularInstance;\n        // Parent's callbacks\n        this.subscribeElementUpdateFn = subscribeElementUpdateFn;\n        this.unsubscribeElementUpdateFn = unsubscribeElementUpdateFn;\n\n        // Attributes\n        this.attributes = {\n            scrollClass: this.$el.dataset['scrollClass'] ?? INVIEW_CLASS,\n            scrollOffset: this.$el.dataset['scrollOffset'] ?? '0,0',\n            scrollPosition: this.$el.dataset['scrollPosition'] ?? 'start,end',\n            scrollModuleProgress:\n                this.$el.dataset['scrollModuleProgress'] != null,\n            scrollCssProgress: this.$el.dataset['scrollCssProgress'] != null,\n            scrollEventProgress:\n                this.$el.dataset['scrollEventProgress'] ?? null,\n            scrollSpeed:\n                this.$el.dataset['scrollSpeed'] != null\n                    ? parseFloat(this.$el.dataset['scrollSpeed'])\n                    : null,\n            scrollRepeat: this.$el.dataset['scrollRepeat'] != null,\n            scrollCall: this.$el.dataset['scrollCall'] ?? null,\n            scrollCallSelf: this.$el.dataset['scrollCallSelf'] != null,\n            scrollIgnoreFold: this.$el.dataset['scrollIgnoreFold'] != null,\n            scrollEnableTouchSpeed:\n                this.$el.dataset['scrollEnableTouchSpeed'] != null,\n        };\n\n        // Limits\n        this.intersection = {\n            start: 0,\n            end: 0,\n        };\n\n        // Metrics\n        this.metrics = {\n            offsetStart: 0,\n            offsetEnd: 0,\n            bcr: {} as DOMRect,\n        };\n\n        // Scroll Values\n        this.currentScroll =\n            this.scrollOrientation === 'vertical'\n                ? window.scrollY\n                : window.scrollX;\n\n        // Parallax\n        this.translateValue = 0;\n\n        // Progress\n        this.progress = 0;\n        this.lastProgress = null;\n        this.progressModularModules = [];\n\n        // Inview\n        this.isInview = false;\n        this.isInteractive = false;\n        this.isAlreadyIntersected = false;\n        this.isInFold = false;\n        this.isFirstResize = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize progress tracking.\n     *\n     * @private\n     */\n    private _init() {\n        if (!this.needRaf) {\n            return;\n        }\n\n        // Prepare modules progress\n        if (this.modularInstance && this.attributes.scrollModuleProgress) {\n            this._getProgressModularModules();\n        }\n\n        // First resize to compute all values\n        this._resize();\n    }\n\n    /**\n     * Callback - Resize callback\n     */\n    public onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        this.currentScroll = currentScroll;\n        this._resize();\n    }\n\n    /**\n     * Callback - RAF callback\n     */\n    public onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        this.currentScroll = currentScroll;\n        this._computeProgress();\n\n        // Parallax\n        if (\n            this.attributes.scrollSpeed &&\n            !isNaN(this.attributes.scrollSpeed)\n        ) {\n            // if touch detected or smooth disabled\n            if (!this.attributes.scrollEnableTouchSpeed && !smooth) {\n                if (this.translateValue) {\n                    this.$el.style.transform = `translate3d(0, 0, 0)`;\n                }\n                this.translateValue = 0;\n\n                // if mousewheel or smooth enabled\n            } else {\n                // Check fold condition\n                if (this.isInFold) {\n                    const progress = Math.max(0, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                } else {\n                    const progress = mapRange(0, 1, -1, 1, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                }\n\n                this.$el.style.transform =\n                    this.scrollOrientation === 'vertical'\n                        ? `translate3d(0, ${this.translateValue}px, 0)`\n                        : `translate3d(${this.translateValue}px, 0, 0)`;\n            }\n        }\n    }\n\n    /**\n     * Inview callback\n     */\n    public setInview() {\n        if (this.isInview) {\n            return;\n        }\n\n        this.isInview = true;\n        this.$el.classList.add(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'enter';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Out of view callback\n     */\n    public setOutOfView() {\n        if (!(this.isInview && this.attributes.scrollRepeat)) {\n            return;\n        }\n\n        this.isInview = false;\n        this.$el.classList.remove(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'leave';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Switch interactivity on to subscribe the instance to the RAF\n     * and start calculations.\n     */\n    public setInteractivityOn() {\n        if (this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = true;\n        this.subscribeElementUpdateFn(this);\n    }\n\n    /**\n     * Switch interactivity off to unsubscribe the instance to the RAF\n     * and stop calculations.\n     */\n    public setInteractivityOff() {\n        if (!this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = false;\n        this.unsubscribeElementUpdateFn(this);\n\n        // Force progress to progress limit when the element is out\n        this.lastProgress != null &&\n            this._computeProgress(closestNumber([0, 1], this.lastProgress));\n    }\n\n    /**\n     * Resize method that compute the element's values.\n     *\n     * @private\n     */\n    private _resize() {\n        this.metrics.bcr = this.$el.getBoundingClientRect();\n        this._computeMetrics();\n        this._computeIntersection();\n\n        // First resize logic\n        if (this.isFirstResize) {\n            this.isFirstResize = false;\n            // Dispatch default call if the element is in fold.\n            if (this.isInFold) {\n                this.setInview();\n            }\n        }\n    }\n\n    /**\n     * Compute element's offsets and determine if the element is in fold.\n     *\n     * @private\n     */\n    private _computeMetrics() {\n        const { top, left, height, width } = this.metrics.bcr;\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        const metricsStart = this.scrollOrientation === 'vertical' ? top : left;\n        const metricsSize =\n            this.scrollOrientation === 'vertical' ? height : width;\n\n        this.metrics.offsetStart =\n            this.currentScroll + metricsStart - this.translateValue;\n        this.metrics.offsetEnd = this.metrics.offsetStart + metricsSize;\n\n        if (\n            this.metrics.offsetStart < wSize &&\n            !this.attributes.scrollIgnoreFold\n        ) {\n            this.isInFold = true;\n        } else {\n            this.isInFold = false;\n        }\n    }\n\n    /**\n     * Compute intersection values depending on the context.\n     *\n     * @private\n     */\n    private _computeIntersection() {\n        // Window size\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n\n        // Metrics size\n        const metricsSize =\n            this.scrollOrientation === 'vertical'\n                ? this.metrics.bcr.height\n                : this.metrics.bcr.width;\n\n        // Offset\n        const offset = this.attributes.scrollOffset.split(',');\n        const offsetStart = offset[0] != undefined ? offset[0].trim() : '0';\n        const offsetEnd = offset[1] != undefined ? offset[1].trim() : '0';\n\n        // Positions\n        const scrollPosition = this.attributes.scrollPosition.split(',');\n        let scrollPositionStart =\n            scrollPosition[0] != undefined ? scrollPosition[0].trim() : 'start';\n        const scrollPositionEnd =\n            scrollPosition[1] != undefined ? scrollPosition[1].trim() : 'end';\n\n        // Viewport\n        const viewportStart = offsetStart.includes('%')\n            ? wSize * parseInt(offsetStart.replace('%', '').trim()) * 0.01\n            : parseInt(offsetStart);\n        const viewportEnd = offsetEnd.includes('%')\n            ? wSize * parseInt(offsetEnd.replace('%', '').trim()) * 0.01\n            : parseInt(offsetEnd);\n\n        // Fold exception\n        if (this.isInFold) {\n            scrollPositionStart = 'fold';\n        }\n\n        // Define Intersection Start\n        switch (scrollPositionStart) {\n            case 'start':\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n\n            case 'middle':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize;\n                break;\n\n            case 'fold':\n                this.intersection.start = 0;\n                break;\n\n            default:\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n        }\n\n        // Define Intersection End\n        switch (scrollPositionEnd) {\n            case 'start':\n                this.intersection.end = this.metrics.offsetStart - viewportEnd;\n                break;\n\n            case 'middle':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n\n            default:\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n        }\n\n        // Avoid to have the end < the start intersection >\n        if (this.intersection.end <= this.intersection.start) {\n            switch (scrollPositionEnd) {\n                case 'start':\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n\n                case 'middle':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize * 0.5;\n                    break;\n\n                case 'end':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize;\n                    break;\n\n                default:\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Compute the scroll progress of the element depending\n     * on its intersection values.\n     *\n     * @private\n     *\n     * @param {number} [forcedProgress] - Value to force progress.\n     */\n    private _computeProgress(forcedProgress?: number) {\n        // Progress\n        const progress =\n            forcedProgress ??\n            clamp(\n                0,\n                1,\n                normalize(\n                    this.intersection.start,\n                    this.intersection.end,\n                    this.currentScroll\n                )\n            );\n\n        this.progress = progress;\n\n        if (progress != this.lastProgress) {\n            this.lastProgress = progress;\n\n            // Set the element's progress to the css variable\n            this.attributes.scrollCssProgress && this._setCssProgress(progress);\n\n            // Set the element's progress to the custom event listeners\n            this.attributes.scrollEventProgress &&\n                this._setCustomEventProgress(progress);\n\n            // Set the element's progress to inline modules\n            if (this.attributes.scrollModuleProgress) {\n                for (const modularModules of this.progressModularModules) {\n                    this.modularInstance &&\n                        this.modularInstance.call(\n                            PROGRESS_MODULAR_METHOD,\n                            progress,\n                            modularModules.moduleName,\n                            modularModules.moduleId\n                        );\n                }\n            }\n\n            // Logic to trigger the inview/out of view callbacks\n            progress > 0 && progress < 1 && this.setInview();\n            progress === 0 && this.setOutOfView();\n            progress === 1 && this.setOutOfView();\n        }\n    }\n\n    /**\n     * Set the element's progress to a specific css variable.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCssProgress(currentProgress = 0) {\n        this.$el.style.setProperty(\n            PROGRESS_CSS_VAR,\n            currentProgress.toString()\n        );\n    }\n\n    /**\n     * Set the element's progress to the custom event listeners.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCustomEventProgress(currentProgress = 0) {\n        const customEventName = this.attributes.scrollEventProgress;\n\n        if (!customEventName) return;\n\n        const customEvent = new CustomEvent(customEventName, {\n            detail: {\n                target: this.$el,\n                progress: currentProgress,\n            },\n        });\n        window.dispatchEvent(customEvent);\n    }\n\n    /**\n     * Get modular modules that can listen the element's progress.\n     *\n     * @private\n     */\n    _getProgressModularModules() {\n        if (!this.modularInstance) {\n            return;\n        }\n\n        const modulesIdNames = Object.keys(this.$el.dataset).filter((key) =>\n            key.includes('module')\n        );\n        const modules: any[] = Object.entries(this.modularInstance.modules);\n\n        if (!modulesIdNames.length) {\n            return;\n        }\n\n        for (const modulesIdName of modulesIdNames) {\n            const moduleId = this.$el.dataset[modulesIdName];\n\n            if (!moduleId) {\n                return;\n            }\n\n            for (const module of modules) {\n                const [moduleName, moduleObj] = module;\n\n                if (moduleId in moduleObj) {\n                    this.progressModularModules.push({\n                        moduleName,\n                        moduleId,\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Function to get scroll call from.\n     *\n     * @private\n     */\n    _getScrollCallFrom(): scrollCallFrom {\n        const closestIntersectionValue = closestNumber(\n            [this.intersection.start, this.intersection.end],\n            this.currentScroll\n        );\n        return this.intersection.start === closestIntersectionValue\n            ? 'start'\n            : 'end';\n    }\n\n    /**\n     * Function to dispatch a custom event or call a modular callback.\n     *\n     * @private\n     *\n     * @param {scrollCallWay} way - Enter or leave.\n     * @param {scrollCallFrom} from - Start or end.\n     */\n    _dispatchCall(way: scrollCallWay, from: scrollCallFrom) {\n        const callParameters = this.attributes.scrollCall?.split(',');\n        const callSelf = this.attributes?.scrollCallSelf;\n\n        if (callParameters && callParameters.length > 1) {\n            // Using Modular.js (https://github.com/modularorg/modularjs)\n            const [func, moduleName, moduleId] = callParameters;\n            let targetModuleId;\n\n            // If the module is set on the scroll element\n            if (callSelf) {\n                targetModuleId = this.$el.dataset[`module${moduleName.trim()}`];\n            } else {\n                targetModuleId = moduleId;\n            }\n\n            this.modularInstance &&\n                this.modularInstance.call(\n                    func.trim(),\n                    {\n                        target: this.$el,\n                        way,\n                        from,\n                    },\n                    moduleName.trim(),\n                    targetModuleId?.trim()\n                );\n        } else if (callParameters) {\n            // Using CustomEvent API (https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\n            const [customEventName] = callParameters;\n            const customEvent = new CustomEvent(customEventName, {\n                detail: {\n                    target: this.$el,\n                    way,\n                    from,\n                },\n            });\n            window.dispatchEvent(customEvent);\n        }\n    }\n}\n", "/**\n * Integrates Lenis with Locomotive's built-in animation system\n */\n\nimport type {\n    CoreOptions,\n    IModular,\n    IScrollElementCallbacksValues,\n    scrollOrientation,\n} from '../types';\nimport IO from './IO';\nimport ScrollElement from './ScrollElement';\n\n/** Defined attributes that need a requestAnimationFrame */\nconst ATTRIBUTES_THAT_NEED_RAF = [\n    'scrollOffset',\n    'scrollPosition',\n    'scrollModuleProgress',\n    'scrollCssProgress',\n    'scrollEventProgress',\n    'scrollSpeed',\n];\n\n/** Default root margins */\nconst TRIGGER_ROOT_MARGIN = '-1px -1px -1px -1px';\nconst RAF_ROOT_MARGIN = '100% 100% 100% 100%'; // Add 100vh top/bottom && 100vw left/right to use a biggest value with data-scroll-speed\n\nexport default class Core {\n    private $scrollContainer!: HTMLElement;\n    private modularInstance?: IModular;\n    private triggerRootMargin!: string;\n    private rafRootMargin!: string;\n    private scrollElements!: ScrollElement[];\n    private triggeredScrollElements!: ScrollElement[];\n    private RAFScrollElements!: ScrollElement[];\n    private scrollElementsToUpdate!: ScrollElement[];\n    private IOTriggerInstance!: IO;\n    private IORafInstance!: IO;\n    private scrollOrientation!: scrollOrientation;\n\n    constructor({\n        $el,\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        scrollOrientation,\n    }: CoreOptions) {\n        if (!$el) {\n            console.error('Please provide a DOM Element as scrollContainer');\n            return;\n        }\n\n        // Scroll container\n        this.$scrollContainer = $el;\n\n        // Modular.js\n        this.modularInstance = modularInstance;\n\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n\n        // IO Margins\n        this.triggerRootMargin = triggerRootMargin ?? TRIGGER_ROOT_MARGIN;\n        this.rafRootMargin = rafRootMargin ?? RAF_ROOT_MARGIN;\n\n        // ScrollElements arrays\n        this.scrollElements = [];\n        this.triggeredScrollElements = [];\n        this.RAFScrollElements = [];\n        this.scrollElementsToUpdate = [];\n\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize the core.\n     *\n     * @private\n     */\n    private _init() {\n        const $scrollElements =\n            this.$scrollContainer.querySelectorAll('[data-scroll]');\n\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements($scrollElementsArr);\n\n        // Trigger IO\n        this.IOTriggerInstance = new IO({\n            scrollElements: [...this.triggeredScrollElements],\n            rootMargin: this.triggerRootMargin,\n            IORaf: false,\n        });\n\n        // Raf IO\n        this.IORafInstance = new IO({\n            scrollElements: [...this.RAFScrollElements],\n            rootMargin: this.rafRootMargin,\n            IORaf: true,\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy core.\n     */\n    public destroy() {\n        this.IOTriggerInstance.destroy();\n        this.IORafInstance.destroy();\n        this._unsubscribeAllScrollElements();\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.RAFScrollElements) {\n            scrollElement.onResize({\n                currentScroll,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Callback - RAF callback.\n     */\n    onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.scrollElementsToUpdate) {\n            scrollElement.onRender({\n                currentScroll,\n                smooth,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Remove items from lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $oldContainer - HTMLElement that contains data-scroll elements to unsubscribe\n     */\n    removeScrollElements($oldContainer: HTMLElement) {\n        const $scrollElementsToRemove =\n            $oldContainer.querySelectorAll('[data-scroll]');\n\n        if (!$scrollElementsToRemove.length) return;\n\n        // 1. Remove from IO\n        for (let index = 0; index < this.triggeredScrollElements.length; index++) {\n            const scrollElement = this.triggeredScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IOTriggerInstance.unobserve(scrollElement.$el);\n                this.triggeredScrollElements.splice(index, 1);\n            }\n        }\n\n        for (let index = 0; index < this.RAFScrollElements.length; index++) {\n            const scrollElement = this.RAFScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IORafInstance.unobserve(scrollElement.$el);\n                this.RAFScrollElements.splice(index, 1);\n            }\n        }\n\n        // 2. Remove from scrollElementsToUpdate[] and scrollElements[]\n        $scrollElementsToRemove.forEach(($scrollElement) => {\n            const targetScrollElementToUpdate =\n                this.scrollElementsToUpdate.find(\n                    (scrollElement) => scrollElement.$el === $scrollElement\n                );\n            const targetScrollElement = this.scrollElements.find(\n                (scrollElement) => scrollElement.$el === $scrollElement\n            );\n\n            if (targetScrollElementToUpdate) {\n                this._unsubscribeElementUpdate(targetScrollElementToUpdate);\n            }\n            if (targetScrollElement) {\n                this.scrollElements = this.scrollElements.filter(\n                    (scrollElementItem) =>\n                        scrollElementItem.id != targetScrollElement.id\n                );\n            }\n        });\n    }\n\n    /**\n     * Add items to lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $newContainer - HTMLElement that contains data-scroll elements to subscribe\n     */\n    addScrollElements($newContainer: HTMLElement) {\n        // 3. Rebuild ScrollElements\n        const $scrollElements = $newContainer.querySelectorAll('[data-scroll]');\n\n        // 4. Get max scrollElement.id\n        const ids: number[] = [];\n        this.scrollElements.forEach((scrollElement) => {\n            ids.push(scrollElement.id);\n        });\n        const maxID = Math.max(...ids, 0);\n        const fromIndex = maxID + 1;\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements(\n            $scrollElementsArr,\n            fromIndex,\n            true\n        );\n    }\n\n    /**\n     * Create a ScrollElement instance for each elements with\n     * `data-scroll` attribute.\n     *\n     * @private\n     *\n     * @param {HTMLElement[]} $scrollElements - List of elements that need\n     *     to be regarded.\n     */\n    _subscribeScrollElements(\n        $scrollElements: HTMLElement[],\n        fromIndex = 0,\n        toObserve = false\n    ) {\n        // For each scroll element create a ScrollElement instance\n        for (let index = 0; index < $scrollElements.length; index++) {\n            const $scrollElement = $scrollElements[index];\n            const needRaf = this._checkRafNeeded($scrollElement);\n\n            const scrollElementInstance = new ScrollElement({\n                $el: $scrollElement,\n                id: fromIndex + index,\n                scrollOrientation: this.scrollOrientation,\n                modularInstance: this.modularInstance,\n                subscribeElementUpdateFn:\n                    this._subscribeElementUpdate.bind(this),\n                unsubscribeElementUpdateFn:\n                    this._unsubscribeElementUpdate.bind(this),\n                needRaf,\n            });\n\n            // Push to common array\n            this.scrollElements.push(scrollElementInstance);\n\n            // Push to specific array\n            if (needRaf) {\n                this.RAFScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IORafInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IORafInstance.observe(scrollElementInstance.$el);\n                }\n            } else {\n                this.triggeredScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IOTriggerInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IOTriggerInstance.observe(scrollElementInstance.$el);\n                }\n            }\n        }\n    }\n\n    /**\n     * Clear all ScrollElement arrays.\n     *\n     * @private\n     */\n    _unsubscribeAllScrollElements() {\n        this.scrollElements = [];\n        this.RAFScrollElements = [];\n        this.triggeredScrollElements = [];\n        this.scrollElementsToUpdate = [];\n    }\n\n    /**\n     * Subscribe ScrollElement instance that needs to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - ScrollElement instance inview\n     *     that needs to be updated.\n     */\n    _subscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate.push(scrollElement);\n    }\n\n    /**\n     * Unscribe ScrollElement instance that doesn't need to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - The updated ScrollElement instance\n     *     out of view now.\n     */\n    _unsubscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(\n            (scrollElementToUpdate) =>\n                scrollElementToUpdate.id != scrollElement.id\n        );\n    }\n\n    /**\n     * Check if a DOM Element need a requestAnimationFrame to be used.\n     *\n     * @private\n     *\n     * @param {HTMLElement} $scrollElement - The element that needs to be checked.\n     *\n     * @returns {boolean}\n     */\n    _checkRafNeeded($scrollElement: HTMLElement) {\n        let attributesThatNeedRaf = [...ATTRIBUTES_THAT_NEED_RAF];\n\n        // Remove utils\n        const removeAttribute = (attributeToRemove: string) => {\n            attributesThatNeedRaf = attributesThatNeedRaf.filter(\n                (attribute) => attribute != attributeToRemove\n            );\n        };\n\n        // 1. Check scroll offset values\n        if ($scrollElement.dataset.scrollOffset) {\n            const value = $scrollElement.dataset.scrollOffset\n                .split(',')\n                .map((test) => test.replace('%', '').trim())\n                .join(',');\n            if (value != '0,0') {\n                return true;\n            } else {\n                removeAttribute('scrollOffset');\n            }\n        } else {\n            removeAttribute('scrollOffset');\n        }\n\n        // 2. Check scroll position values\n        if ($scrollElement.dataset.scrollPosition) {\n            const value = $scrollElement.dataset.scrollPosition.trim();\n            if (value != 'top,bottom') {\n                return true;\n            } else {\n                removeAttribute('scrollPosition');\n            }\n        } else {\n            removeAttribute('scrollPosition');\n        }\n\n        // 3. Check scroll speed values\n        if (\n            $scrollElement.dataset.scrollSpeed &&\n            !isNaN(parseFloat($scrollElement.dataset.scrollSpeed))\n        ) {\n            return true;\n        } else {\n            removeAttribute('scrollSpeed');\n        }\n\n        // 4. Check others attributes\n        for (const attribute of attributesThatNeedRaf) {\n            if (attribute in $scrollElement.dataset) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n", "/**\n * Resize Observer\n *\n * The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size,\n * with notifications being delivered to the observer each time the size changes.\n *\n * Features functions to:\n *\n * - Trigger the resize callback if the specified element's size change.\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API}\n */\n\nimport type { IROOptions } from '../types';\n\nexport default class RO {\n    private $resizeElements: HTMLElement[];\n    private isFirstObserve: boolean;\n    private observer!: ResizeObserver;\n    private resizeCallback: () => void;\n\n    constructor({ resizeElements, resizeCallback = () => {} }: IROOptions) {\n        // Parameters\n        this.$resizeElements = resizeElements;\n        this.resizeCallback = resizeCallback;\n\n        // Flags\n        this.isFirstObserve = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Resize Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Callback\n        const onResize = (entries: ResizeObserverEntry[]) => {\n            !this.isFirstObserve && this.resizeCallback?.();\n            this.isFirstObserve = false;\n        };\n\n        // Instance\n        this.observer = new ResizeObserver(onResize);\n\n        // Observe each default elements\n        for (const $resizeElement of this.$resizeElements) {\n            this.observer.observe($resizeElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Resize Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n}\n", "//@ts-ignore\nimport Lenis from 'lenis';\nimport Core from './core/Core';\nimport RO from './core/RO';\nimport type {\n    ILenisScrollToOptions,\n    ILenisScrollValues,\n    ILocomotiveScrollOptions,\n    IModular,\n    lenisTargetScrollTo,\n} from './types';\nimport type { LenisOptions } from 'lenis';\n\n/**\n * Locomotive Scroll\n *\n * Detection of elements in viewport & smooth scrolling with parallax.\n *\n * Inspired by\n * {@link https://github.com/locomotivemtl/locomotive-scroll locomotive-scroll.js}\n * and built around\n * {@link https://github.com/darkroomengineering/lenis lenis.js}.\n */\n\nexport default class LocomotiveScroll {\n    public rafPlaying: boolean;\n    public lenisInstance: any;\n\n    private coreInstance: any;\n\n    private lenisOptions?: LenisOptions;\n    private modularInstance?: IModular;\n    private triggerRootMargin?: string;\n    private rafRootMargin?: string;\n    private rafInstance?: any;\n    private autoResize?: boolean;\n    private autoStart?: boolean;\n    private ROInstance?: RO;\n    private scrollCallback?(scrollValues: ILenisScrollValues): void;\n    private initCustomTicker?: (render: () => void) => void;\n    private destroyCustomTicker?: (render: () => void) => void;\n    private _onRenderBind: () => void;\n    private _onResizeBind: () => void;\n    private _onScrollToBind: (event: MouseEvent) => void;\n\n    constructor({\n        lenisOptions = {},\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        autoResize = true,\n        autoStart = true,\n        scrollCallback = () => {},\n        initCustomTicker,\n        destroyCustomTicker,\n    }: ILocomotiveScrollOptions = {}) {\n\n        for (const [key] of Object.entries(lenisOptions)) {\n            if ([\"wrapper\", \"content\", \"infinite\"].includes(key)) {\n                console.warn(`Warning: Key \"${key}\" is not possible to edit in Locomotive Scroll.`);\n            }\n        }\n\n        // Get arguments\n        Object.assign(this, {\n            lenisOptions,\n            modularInstance,\n            triggerRootMargin,\n            rafRootMargin,\n            autoResize,\n            autoStart,\n            scrollCallback,\n            initCustomTicker,\n            destroyCustomTicker,\n        });\n\n\n        // Binding\n        this._onRenderBind = this._onRender.bind(this);\n        this._onScrollToBind = this._onScrollTo.bind(this);\n        this._onResizeBind = this._onResize.bind(this);\n\n        // Data\n        this.rafPlaying = false;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize instance.\n     *\n     * @private\n     */\n    private _init(): void {\n        // Create Lenis instance\n        this.lenisInstance = new Lenis({\n            ...this.lenisOptions,\n            wrapper: window,\n            content: document.documentElement,\n            infinite: false\n        });\n        this.lenisInstance?.on('scroll', this.scrollCallback);\n\n        // Add scroll direction attribute on body\n        document.documentElement.setAttribute(\n            'data-scroll-orientation',\n            this.lenisInstance.options.orientation\n        );\n\n        requestAnimationFrame(() => {\n            // Create Core Instance\n            this.coreInstance = new Core({\n                $el: this.lenisInstance.rootElement,\n                modularInstance: this.modularInstance,\n                triggerRootMargin: this.triggerRootMargin,\n                rafRootMargin: this.rafRootMargin,\n                scrollOrientation: this.lenisInstance.options.orientation,\n            });\n\n            // Bind Events\n            this._bindEvents();\n\n            // RAF warning\n            if (this.initCustomTicker && !this.destroyCustomTicker) {\n                console.warn(\n                    'initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            } else if (!this.initCustomTicker && this.destroyCustomTicker) {\n                console.warn(\n                    'destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            }\n\n            // Start RAF\n            this.autoStart && this.start();\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy instance.\n     */\n    public destroy(): void {\n        // Stop raf\n        this.stop();\n        // Unbind Events\n        this._unbindEvents();\n        // Destroy Lenis\n        this.lenisInstance.destroy();\n        // Destroy Core\n        this.coreInstance?.destroy();\n\n        // Ensure a delay before destroying to handle cases of instant destruction\n        requestAnimationFrame(() => {\n            this.coreInstance?.destroy();\n        });\n    }\n\n    /**\n     * Events - Subscribe events to listen.\n     */\n    private _bindEvents() {\n        this._bindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance = new RO({\n                    resizeElements: [document.body],\n                    resizeCallback: this._onResizeBind,\n                });\n            } else {\n                (window as any).addEventListener('resize', this._onResizeBind);\n            }\n        }\n    }\n\n    /**\n     * Events - Unsubscribe listened events.\n     */\n    private _unbindEvents() {\n        this._unbindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance && this.ROInstance.destroy();\n            } else {\n                (window as any).removeEventListener(\n                    'resize',\n                    this._onResizeBind\n                );\n            }\n        }\n    }\n\n    /**\n     * Events - Subscribe scrollTo events to listen.\n     */\n    private _bindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement): void => {\n                $el.addEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Events - Unsubscribe scrollTo listened events.\n     */\n    private _unbindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement) => {\n                $el.removeEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    private _onResize() {\n        // Waiting the next frame to get the new current scroll value return by Lenis\n        requestAnimationFrame(() => {\n            this.coreInstance?.onResize({\n                currentScroll: this.lenisInstance.scroll,\n            });\n        });\n    }\n\n    /**\n     * Callback - Render callback.\n     */\n    private _onRender() {\n        this.lenisInstance?.raf(Date.now());\n\n        this.coreInstance?.onRender({\n            currentScroll: this.lenisInstance.scroll,\n            smooth: this.lenisInstance.options.smoothWheel,\n        });\n    }\n\n    /**\n     * Callback - Scroll To callback.\n     */\n    private _onScrollTo(event: MouseEvent) {\n        event.preventDefault();\n        const $target = (event.currentTarget as HTMLElement) ?? null;\n        if (!$target) return;\n        const target =\n            $target.getAttribute('data-scroll-to-href') ||\n            $target.getAttribute('href');\n        const offset = $target.getAttribute('data-scroll-to-offset') || 0;\n        const duration =\n            $target.getAttribute('data-scroll-to-duration') ||\n            this.lenisInstance.options.duration\n        target &&\n            this.scrollTo(target, {\n                offset: typeof offset === 'string' ? parseInt(offset) : offset,\n                duration:\n                    typeof duration === 'string'\n                        ? parseInt(duration)\n                        : duration,\n            });\n    }\n\n    /**\n     * Start RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public start(): void {\n        if (this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis start method\n        this.lenisInstance?.start();\n\n        this.rafPlaying = true;\n        this.initCustomTicker\n            ? this.initCustomTicker(this._onRenderBind)\n            : this._raf();\n    }\n\n    /**\n     * Stop RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public stop(): void {\n        if (!this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis stop method\n        this.lenisInstance?.stop();\n\n        this.rafPlaying = false;\n        this.destroyCustomTicker\n            ? this.destroyCustomTicker(this._onRenderBind)\n            : this.rafInstance && cancelAnimationFrame(this.rafInstance);\n    }\n\n    /**\n     * Remove old scroll elements items and rebuild ScrollElements instances.\n     */\n    public removeScrollElements($oldContainer: HTMLElement): void {\n        if (!$oldContainer) {\n            console.error('Please provide a DOM Element as $oldContainer');\n            return;\n        }\n\n        this._unbindScrollToEvents($oldContainer);\n        this.coreInstance?.removeScrollElements($oldContainer);\n    }\n\n    /**\n     * Add new scroll elements items and rebuild ScrollElements instances.\n     */\n    public addScrollElements($newContainer: HTMLElement): void {\n        if (!$newContainer) {\n            console.error('Please provide a DOM Element as $newContainer');\n            return;\n        }\n\n        this.coreInstance?.addScrollElements($newContainer);\n        requestAnimationFrame(() => {\n            this._bindScrollToEvents($newContainer);\n        });\n    }\n\n    /**\n     * Trigger resize callback.\n     */\n    public resize(): void {\n        this._onResizeBind();\n    }\n\n    /**\n     * Trigger scroll to callback.\n     */\n    public scrollTo(\n        target: lenisTargetScrollTo,\n        options?: ILenisScrollToOptions\n    ): void {\n        this.lenisInstance?.scrollTo(target, {\n            offset: options?.offset,\n            lerp: options?.lerp,\n            duration: options?.duration,\n            immediate: options?.immediate,\n            lock: options?.lock,\n            force: options?.force,\n            easing: options?.easing,\n            onComplete: options?.onComplete,\n        });\n    }\n\n    /**\n     * RequestAnimationFrame that active Lenis smooth and scroll progress.\n     *\n     * @private\n     *\n     */\n    private _raf() {\n        this._onRenderBind();\n        this.rafInstance = requestAnimationFrame(() => this._raf());\n    }\n}\n\nexport * from './types';\n"],
  "mappings": "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",
  "names": ["clamp", "min", "input", "max", "Math", "Animate", "constructor", "this", "isRunning", "value", "from", "to", "duration", "currentTime", "deltaTime", "completed", "easing", "linearProgress", "easedProgress", "lerp", "damp", "x", "y", "lambda", "dt", "t", "exp", "round", "stop", "_a", "onUpdate", "call", "onStart", "Dimensions", "wrapper", "content", "autoResize", "debounce", "debounceValue", "width", "height", "scrollWidth", "scrollHeight", "resize", "onWrapperResize", "onContentResize", "window", "innerWidth", "innerHeight", "HTMLElement", "clientWidth", "clientHeight", "debouncedResize", "callback", "delay", "timer", "args", "arguments", "context", "clearTimeout", "setTimeout", "apply", "addEventListener", "wrapperResizeObserver", "ResizeObserver", "observe", "contentResizeObserver", "destroy", "disconnect", "_b", "removeEventListener", "limit", "Emitter", "events", "event", "callbacks", "i", "length", "push", "e", "filter", "LINE_HEIGHT", "VirtualScroll", "element", "wheelMultiplier", "touchMultiplier", "lastDelta", "windowWidth", "windowHeight", "onTouchStart", "clientX", "clientY", "targetTouches", "touchStart", "emitter", "emit", "deltaX", "deltaY", "onTouchMove", "_d", "_c", "onTouchEnd", "onWheel", "deltaMode", "onWindowResize", "passive", "on", "Lenis", "document", "documentElement", "wheelEventsTarget", "eventsTarget", "smoothWheel", "syncTouch", "syncTouchLerp", "touchInertiaMultiplier", "pow", "infinite", "orientation", "gestureOrientation", "prevent", "virtualScroll", "__experimental__naiveDimensions", "__isScrolling", "__isStopped", "__isLocked", "userData", "lastVelocity", "velocity", "direction", "onPointerDown", "button", "reset", "onVirtualScroll", "data", "options", "ctrlKey", "isTouch", "type", "includes", "isWheel", "isTouching", "isStopped", "isLocked", "isClick", "isUnknownGesture", "composedPath", "slice", "indexOf", "rootElement", "find", "node", "Element", "hasAttribute", "l", "classList", "contains", "_e", "preventDefault", "isScrolling", "animate", "delta", "abs", "hasTouchInertia", "scrollTo", "targetScroll", "Object", "assign", "programmatic", "onNativeScroll", "__resetVelocityTimeout", "__preventNextNativeScrollEvent", "lastScroll", "animatedScroll", "actualScroll", "sign", "lenisVersion", "body", "dimensions", "updateClassName", "time", "cleanUpClassName", "off", "scroll", "isHorizontal", "scrollLeft", "scrollTop", "start", "advance", "target", "offset", "immediate", "lock", "onComplete", "force", "querySelector", "nodeType", "wrapperRect", "getBoundingClientRect", "left", "top", "rect", "setScroll", "preventNextNativeScrollEvent", "fromTo", "requestAnimationFrame", "modulo", "n", "d", "progress", "isSmooth", "className", "trim", "replace", "IO", "constructor", "scrollElements", "rootMargin", "IORaf", "this", "observer", "_init", "IntersectionObserver", "entries", "forEach", "entry", "$targetItem", "find", "item", "$el", "target", "isIntersecting", "isAlreadyIntersected", "_setInview", "_setOutOfView", "scrollElement", "observe", "destroy", "disconnect", "$scrollElement", "unobserve", "setInteractivityOn", "setInview", "setInteractivityOff", "setOutOfView", "attributes", "scrollRepeat", "mapRange", "inMin", "inMax", "outMin", "outMax", "value", "closestNumber", "array", "reduce", "prev", "curr", "Math", "abs", "ScrollElement", "id", "modularInstance", "subscribeElementUpdateFn", "unsubscribeElementUpdateFn", "needRaf", "scrollOrientation", "_this$$el$dataset$scr", "_this$$el$dataset$scr2", "_this$$el$dataset$scr3", "_this$$el$dataset$scr4", "_this$$el$dataset$scr5", "intersection", "metrics", "currentScroll", "translateValue", "progress", "lastProgress", "progressModularModules", "isInview", "isInteractive", "isInFold", "isFirstResize", "scrollClass", "dataset", "scrollOffset", "scrollPosition", "scrollModuleProgress", "scrollCssProgress", "scrollEventProgress", "scrollSpeed", "parseFloat", "scrollCall", "scrollCallSelf", "scrollIgnoreFold", "scrollEnableTouchSpeed", "start", "end", "offsetStart", "offsetEnd", "bcr", "window", "scrollY", "scrollX", "_getProgressModularModules", "_resize", "onResize", "onRender", "smooth", "wSize", "innerHeight", "innerWidth", "_computeProgress", "isNaN", "max", "style", "transform", "classList", "add", "from", "_getScrollCallFrom", "_dispatchCall", "remove", "getBoundingClientRect", "_computeMetrics", "_computeIntersection", "top", "left", "height", "width", "metricsSize", "offset", "split", "undefined", "trim", "scrollPositionStart", "scrollPositionEnd", "viewportStart", "includes", "parseInt", "replace", "viewportEnd", "forcedProgress", "_setCssProgress", "_setCustomEventProgress", "modularModules", "call", "moduleName", "moduleId", "currentProgress", "setProperty", "toString", "customEventName", "customEvent", "CustomEvent", "detail", "dispatchEvent", "modulesIdNames", "Object", "keys", "filter", "key", "modules", "length", "modulesIdName", "module", "moduleObj", "push", "closestIntersectionValue", "way", "_this$attributes$scro", "_this$attributes", "callParameters", "callSelf", "_targetModuleId", "func", "targetModuleId", "ATTRIBUTES_THAT_NEED_RAF", "Core", "triggerRootMargin", "rafRootMargin", "$scrollContainer", "triggeredScrollElements", "RAFScrollElements", "scrollElementsToUpdate", "IOTriggerInstance", "IORafInstance", "console", "error", "$scrollElements", "querySelectorAll", "$scrollElementsArr", "Array", "_subscribeScrollElements", "_unsubscribeAllScrollElements", "removeScrollElements", "$oldContainer", "$scrollElementsToRemove", "index", "indexOf", "splice", "targetScrollElementToUpdate", "targetScrollElement", "_unsubscribeElementUpdate", "scrollElementItem", "addScrollElements", "$newContainer", "ids", "fromIndex", "toObserve", "_checkRafNeeded", "scrollElementInstance", "_subscribeElementUpdate", "bind", "scrollElementToUpdate", "attributesThatNeedRaf", "removeAttribute", "attributeToRemove", "attribute", "map", "test", "join", "RO", "resizeElements", "resizeCallback", "$resizeElements", "isFirstObserve", "ResizeObserver", "_this$resizeCallback", "$resizeElement", "LocomotiveScroll", "lenisOptions", "autoResize", "autoStart", "scrollCallback", "initCustomTicker", "destroyCustomTicker", "rafPlaying", "lenisInstance", "coreInstance", "rafInstance", "ROInstance", "_onRenderBind", "_onResizeBind", "_onScrollToBind", "warn", "assign", "_onRender", "_onScrollTo", "_onResize", "_this$lenisInstance", "Lenis", "_extends", "wrapper", "content", "document", "documentElement", "infinite", "on", "setAttribute", "options", "orientation", "requestAnimationFrame", "rootElement", "_bindEvents", "_this$coreInstance", "stop", "_unbindEvents", "_this$coreInstance2", "_bindScrollToEvents", "body", "addEventListener", "_unbindScrollToEvents", "removeEventListener", "$container", "$rootContainer", "$scrollToElements", "_this$coreInstance3", "scroll", "_this$lenisInstance2", "_this$coreInstance4", "raf", "Date", "now", "smoothWheel", "event", "_event$currentTarget", "preventDefault", "$target", "currentTarget", "getAttribute", "duration", "scrollTo", "_this$lenisInstance3", "_raf", "_this$lenisInstance4", "cancelAnimationFrame", "_this$coreInstance5", "_this$coreInstance6", "resize", "_this$lenisInstance5", "lerp", "immediate", "lock", "force", "easing", "onComplete"]
}
